//算法名称-时序计算(TimingComputation)
import java.sql.Timestamp
import java.time.{LocalDateTime, ZoneId, ZonedDateTime}

import com.cloudera.sparkts.{BusinessDayFrequency, DateTimeIndex}
import org.apache.spark.sql.Row
import org.apache.spark.{SparkConf, SparkContext}
import org.apache.spark.sql.types._
import cn.neucloud.dasuan.analysis.timeseries.sparkts._
//数据准备
val data = Array("2015-8-14-INTC-1533614-29.44","2015-9-14-PAYX-343119-45.44","2015-8-31-USB-335356-42.44",
      "2015-9-2-XLNX-388414-40.44","2015-8-6-AEP-76758-56.44","2015-8-18-HRS-37456-82.44","2015-8-3-TGT-289356-80.44",
      "2015-9-8-ISRG-84925-520.44","2015-8-26-SYMC-565054-20.44","2015-9-9-TSN-116301-42.44","2015-8-20-FFIV-72080-126.44",
      "2015-9-1-GOOG-253612-597.44","2015-8-3-CMCSA-687076-63.44","2015-8-21-MDLZ-1807436-43.44","2015-8-6-MAT-352594-22.44",
      "2015-8-14-INTC-1533614-29.66","2015-9-14-PAYX-343119-45.66","2015-8-31-USB-335356-42.66","2015-9-2-XLNX-388414-40.66",
      "2015-8-6-AEP-76758-56.66","2015-8-18-HRS-37456-82.66","2015-8-3-TGT-289356-80.66","2015-9-8-ISRG-84925-520.66",
      "2015-8-26-SYMC-565054-20.66","2015-9-9-TSN-116301-42.66","2015-8-20-FFIV-72080-126.66","2015-9-1-GOOG-253612-597.66",
      "2015-8-3-CMCSA-687076-63.66","2015-8-21-MDLZ-1807436-43.66","2015-8-6-MAT-352594-22.66")

val rdd = sc.parallelize(data)
val rowRdd = rdd.map { line =>
  val tokens = line.split("-")
  val dt = ZonedDateTime.of(tokens(0).toInt, tokens(1).toInt, tokens(2).toInt, 0, 0, 0, 0,
  ZoneId.systemDefault())
  val symbol = tokens(3)
  val price = tokens(5).toDouble
  Row(Timestamp.from(dt.toInstant), symbol, price)
}
val fields = Seq(
  StructField("timestamp", TimestampType, true),
StructField("symbol", StringType, true),
StructField("price", DoubleType, true)
)
val schema = StructType(fields)
val tickerObs = spark.createDataFrame(rowRdd, schema)
println("DataFrame...: " + tickerObs.count())

val zone = ZoneId.systemDefault()
val dtIndex = DateTimeIndex.uniformFromInterval(
  ZonedDateTime.of(LocalDateTime.parse("2015-08-03T00:00:00"), zone),
  ZonedDateTime.of(LocalDateTime.parse("2015-10-29T00:00:00"), zone),
  new BusinessDayFrequency(1))

val timeSeriesRDD = TimeSeriesRDD.fromObservations(dtIndex, tickerObs, "timestamp", "symbol", "price")

// 三种DataFrame的转化是以RDD作为桥梁的，例如TSDF转InstantDF是先从TSRDD转换成InstantRDD，再从InstantRDD转化成InstantDF
// 同理，其他两个也是这样转换的
val timeSeriesDF = timeSeriesRDD.toTimeSeriesDataFrame()
val instantDF = timeSeriesRDD.toInstantsRDD().toInstantsDataFrame()
val observationsDF = timeSeriesRDD.toObservationsRDD("timestamp", "symbol", "price").toObservationsDataFrame()

println("------------timeSeriesDF---------------")
timeSeriesDF.show(false)

println("------------instantDF---------------")
instantDF.show()

println("-----------observationsDF----------------")
observationsDF.show()


