//算法名称-线性回归(LinerRegression)
import org.apache.spark.mllib.linalg.{Vector => MLLIBVector, Vectors => MLLIBVectors}
import org.apache.spark.ml.linalg.{Vector, Vectors}
import org.apache.spark.mllib.regression.LassoModel
import org.apache.spark.sql.{DataFrame, SQLContext}
import org.apache.spark.{SparkConf, SparkContext}
import org.apache.spark.mllib.regression.LassoModel
import cn.neucloud.dasuan.analysis.regression.LassoRegression

val sqlContext = new org.apache.spark.sql.SQLContext(sc)

val dataset: DataFrame = sqlContext.createDataFrame(Seq(
(-9.490009878824548, Vectors.sparse(10, Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), Array(0.4551273600657362, 0.36644694351969087, -0.38256108933468047, -0.4458430198517267, 0.33109790358914726, 0.8067445293443565, -0.2624341731773887, -0.44850386111659524, -0.07269284838169332, 0.5658035575800715))),
(0.2577820163584905, Vectors.sparse(10, Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), Array(0.8386555657374337, -0.1270180511534269, 0.499812362510895, -0.22686625128130267, -0.6452430441812433, 0.18869982177936828, -0.5804648622673358, 0.651931743775642, -0.6555641246242951, 0.17485476357259122))),
(-4.438869807456516, Vectors.sparse(10, Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), Array(0.5025608135349202, 0.14208069682973434, 0.16004976900412138, 0.505019897181302, -0.9371635223468384, -0.2841601610457427, 0.6355938616712786, -0.1646249064941625, 0.9480713629917628, 0.42681251564645817))),
(-19.782762789614537, Vectors.sparse(10, Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), Array(-0.0388509668871313, -0.4166870051763918, 0.8997202693189332, 0.6409836467726933, 0.273289095712564, -0.26175701211620517, -0.2794902492677298, -0.1306778297187794, -0.08536581111046115, -0.05462315824828923))),
(-7.966593841555266, Vectors.sparse(10, Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), Array(-0.06195495876886281, 0.6546448480299902, -0.6979368909424835, 0.6677324708883314, -0.07938725467767771, -0.43885601665437957, -0.608071585153688, -0.6414531182501653, 0.7313735926547045, -0.026818676347611925))),
(-7.896274316726144, Vectors.sparse(10, Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), Array(-0.15805658673794265, 0.26573958270655806, 0.3997172901343442, -0.3693430998846541, 0.14324061105995334, -0.25797542063247825, 0.7436291919296774, 0.6114618853239959, 0.2324273700703574, -0.25128128782199144))),
(-8.464803554195287, Vectors.sparse(10, Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), Array(0.39449745853945895, 0.817229160415142, -0.6077058562362969, 0.6182496334554788, 0.2558665508269453, -0.07320145794330979, -0.38884168866510227, 0.07981886851873865, 0.27022202891277614, -0.7474843534024693))),
(2.1214592666251364, Vectors.sparse(10, Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), Array(-0.005346215048158909, -0.9453716674280683, -0.9270309666195007, -0.032312290091389695, 0.31010676221964206, -0.20846743965751569, 0.8803449313707621, -0.23077831216541722, 0.29246395759528565, 0.5409312755478819))),
(1.0720117616524107, Vectors.sparse(10, Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), Array(0.7880855916368177, 0.19767407429003536, 0.9520689432368168, -0.845829774129496, 0.5502413918543512, -0.44235539500246457, 0.7984106594591154, -0.2523277127589152, -0.1373808897290778, -0.3353514432305029))),
(-13.772441561702871, Vectors.sparse(10, Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), Array(-0.3697050572653644, -0.11452811582755928, -0.807098168238352, 0.4903066124307711, -0.6582805242342049, 0.6107814398427647, -0.7204208094262783, -0.8141063661170889, -0.9459402662357332, 0.09666938346350307))),
(-5.082010756207233, Vectors.sparse(10, Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), Array(-0.43560342773870375, 0.9349906440170221, 0.8090021580031235, -0.3121157071110545, -0.9718883630945336, 0.6191882496201251, 0.0429886073795116, 0.670311110015402, 0.16692329718223786, 0.37649213869502973))),
(7.887786536531237, Vectors.sparse(10, Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), Array(0.11276440263810383, -0.7684997525607482, 0.1770172737885798, 0.7902845707138706, 0.2529503304079441, -0.23483801763662826, 0.8072501895004851, 0.6673992021927047, -0.4796127376677324, 0.9244724404994455))),
(14.323146365332388, Vectors.sparse(10, Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), Array(-0.2049276879687938, 0.1470694373531216, -0.48366999792166787, 0.643491115907358, 0.3183669486383729, 0.22821350958477082, -0.023605251086149304, -0.2770587742156372, 0.47596326458377436, 0.7107229819632654))),
(-20.057482615789212, Vectors.sparse(10, Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), Array(-0.3205057828114841, 0.51605972926996, 0.45215640988181516, 0.01712446974606241, 0.5508198371849293, -0.2478254241316491, 0.7256483175955235, 0.39418662792516, -0.6797384914236382, 0.6001217520150142))),
(-0.8995693247765151, Vectors.sparse(10, Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), Array(0.4508991072414843, 0.589749448443134, 0.6464818311502738, 0.7005669004769028, 0.9699584106930381, -0.7417466269908464, 0.22818964839784495, 0.08574936236270037, -0.6945765138377225, 0.06915201979238828))),
(-19.16829262296376, Vectors.sparse(10, Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), Array(0.09798746565879424, -0.34288007110901964, 0.440249350802451, -0.22440768392359534, -0.9695067570891225, -0.7942032659310758, -0.792286205517398, -0.6535487038528798, 0.7952676470618951, -0.1622831617066689))),
(5.601801561245534, Vectors.sparse(10, Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), Array(0.6949189734965766, -0.32697929564739403, -0.15359663581829275, -0.8951865090520432, 0.2057889391931318, -0.6676656789571533, -0.03553655732400762, 0.14550349954571096, 0.034600542078191854, 0.4223352065067103))),
(-3.2256352187273354, Vectors.sparse(10, Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), Array(0.35278245969741096, 0.7022211035026023, 0.5686638754605697, -0.4202155290448111, -0.26102723928249216, 0.010688215941416779, -0.4311544807877927, 0.9500151672991208, 0.14380635780710693, -0.7549354840975826))),
(1.5299675726687754, Vectors.sparse(10, Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), Array(-0.13079299081883855, 0.0983382230287082, 0.15347083875928424, 0.45507300685816965, 0.1921083467305864, 0.6361110540492223, 0.7675261182370992, -0.2543488202081907, 0.2927051050236915, 0.680182444769418))),
(-0.250102447941961, Vectors.sparse(10, Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), Array(-0.8062832278617296, 0.8266289890474885, 0.22684501241708888, 0.1726291966578266, -0.6778773666126594, 0.9993906921393696, 0.1789490173139363, 0.5584053824232391, 0.03495894704368174, -0.8505720014852347)))
)).toDF("label", "features")

val lasso: LassoRegression = new LassoRegression
val lassoModel: LassoModel = lasso.lasso(dataset, 100, 1.0, 0.01, 1.0)
val point: Array[Double] = Array[Double](-8.49, 1.45, 1.36, 0.38, 0.44, 1.33, 1.80, 0.26, 0.44, 0.07)
val points: MLLIBVector = MLLIBVectors.dense(point)

val predictValue = lassoModel.predict(points)
println(predictValue)
println("----------------------------")
lasso.printWeights(lassoModel)
